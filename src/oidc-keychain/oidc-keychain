#!/bin/bash
# oidc-keychain - re-use oidc-agent between logins
#
# Inspired by https://www.funtoo.org/Keychain for ssh-agent and gpg-agent
#

ME=oidc-keychain

usage()
{
  (
  echo "Usage: $ME [-?Vk] [--help|--usage|--version] [--kill] \\"
  echo "           [oidc-agent options] [ACCOUNT_SHORTNAME...]"
  )>&2
}

help()
{
  (
  echo "$ME -- Re-use oidc-agent between logins"
  echo
  echo "ACCOUNT_SHORTNAME loads the account if not already loaded"
  echo "oidc-agent options will be passed to oidc-agent when starting it"
  echo
  echo " General:"
  echo "  -k, --kill                 Kill oidc-agent if it is running"
  echo 
  echo " Help:"
  echo "  -?, --help                 Give this help list"
  echo "      --usage                Give a short usage message"
  echo "  -V, --version              Print program version"
  )>&2
}

AGENT_SHORT="cdg"
AGENT_SHORT_PARAM="t:"
SHORT_OPTS="?hVk$AGENT_SHORT$AGENT_SHORT_PARAM"
AGENT_LONG="confirm,no-autoload,no-scheme,no-webserver,seccomp,console,debug"
# single colon means required param, double colon means optional param
AGENT_LONG_PARAM="lifetime:,pw-store::,with-group::"
LONG_OPTS="help,usage,version,kill,$AGENT_LONG,$AGENT_LONG_PARAM"

RE_AGENT_SHORT="^-(`echo "$AGENT_SHORT"|sed 's/./&|/g'`)$"
RE_AGENT_SHORT_PARAM="^-(`echo "$AGENT_SHORT_PARAM"|sed 's/://g;s/./&|/g'`)$"
RE_AGENT_LONG="^--(`echo "$AGENT_LONG"|sed 's/,/|/g'`)$"
RE_AGENT_LONG_PARAM="^--(`echo "$AGENT_LONG_PARAM"|sed 's/://g;s/,/|/g'`)$"

OPTS="`getopt -o "$SHORT_OPTS" --long "$LONG_OPTS" -n $ME -- "$@"`"
if [ $? -ne 0 ]; then
  echo "Try \`$ME --help' or \`$ME --usage' for more information." >&2
  exit 64
fi
eval set -- "$OPTS"

KILL=false
AGENT_OPTS=""
while true; do
  # Look first for options to pass on to oidc-agent
  if [[ "$1" =~ $RE_AGENT_SHORT ]]; then
    AGENT_OPTS="$AGENT_OPTS $1"
  elif [[ "$1" =~ $RE_AGENT_SHORT_PARAM ]]; then
    AGENT_OPTS="$AGENT_OPTS $1 $2"
    shift
  elif [[ "$1" =~ $RE_AGENT_LONG ]]; then
    AGENT_OPTS="$AGENT_OPTS $1"
  elif [[ "$1" =~ $RE_AGENT_LONG_PARAM ]]; then
    if [ -z "$2" ]; then
      AGENT_OPTS="$AGENT_OPTS $1"
    else
      AGENT_OPTS="$AGENT_OPTS $1=$2"
    fi
    shift
  else
    # Look for own options
    case "$1" in
      -k|--kill)
        KILL=true
        ;;
      "-?"|-h|--help)
        usage
        help
        exit
        ;;
      --usage)
        usage
        exit
        ;;
      -V|--version)
        echo `oidc-agent -V`|sed 's/agent/keychain/'
        ;;
      --)
        shift
        break
        ;;
      *)
        echo "$ME: internal error: unprocessed option $1" >&2
        exit 2
        ;;
    esac
  fi
  shift
done

# Find the location of the initialization script
if [ -z "$OIDC_CONFIG_DIR" ]; then
  if [ -d $HOME/.config ]; then
    OIDC_CONFIG_DIR=$HOME/.config/oidc-agent
  else
    OIDC_CONFIG_DIR=$HOME/.oidc-agent
  fi
fi
mkdir -p $OIDC_CONFIG_DIR/.keychain
INITSCRIPT="$OIDC_CONFIG_DIR/.keychain/`uname -n`.sh"

make_initscript()
{
  (
  echo "OIDC_SOCK=$OIDC_SOCK; export OIDC_SOCK;"
  echo "OIDCD_PID=$OIDCD_PID; export OIDCD_PID;"
  ) >$INITSCRIPT
}

# If not already set, read the agent variables from the initialization script
if [ -z "$OIDC_SOCK" ] || [ -z "$OIDCD_PID" ]; then
  if [ -f "$INITSCRIPT" ]; then
    source $INITSCRIPT
  fi
elif [ ! -f $INITSCRIPT ] && kill -0 "$OIDCD_PID" 2>/dev/null; then
  # must have previously ran just oidc-agent, so create the init script
  make_initscript
fi

if [ -z "$OIDCD_PID" ] || ! kill -0 "$OIDCD_PID" 2>/dev/null; then
  # Agent not running
  if $KILL; then
    echo "$ME: Agent was already not running" >&2
    rm -f $INITSCRIPT
    echo "false;"
    exit 1
  fi
  CMDS="`oidc-agent $AGENT_OPTS`"
  if [ "$?" -ne 0 ]; then
    RET="$?"
    echo "$ME: could not start oidc-agent" >&2
    echo "false;"
    exit $RET
  fi
  CMDS="${CMDS/echo /echo echo $ME: }"
  eval "$CMDS"
  echo ";"
  make_initscript
elif $KILL; then
  # Kill a running agent
  if oidc-agent -k; then
    rm -f $INITSCRIPT
  else
    RET=$?
    echo "false;"
    exit $RET
  fi
  exit
else
  # Reuse agent
  echo echo "$ME: Reusing agent pid $OIDCD_PID;"
fi
cat $INITSCRIPT

# Add given accounts if they're not already loaded.
for ACCOUNT; do
  # Would prefer an option to oidc-agent or oidc-add to find out if an
  #  account is loaded, but for now find out by trying to get a token.
  if oidc-token $ACCOUNT 2>&1|grep -q Error:; then
    # Account not already loaded, so add it.
    # Send all messages to stderr and also pipe to grep to look for error
    if oidc-add $ACCOUNT 2>&1|tee /dev/fd/2|grep -q Error:; then
      echo "false;" 
      exit 1
    fi
  fi
done
